# Example Playbook to configure query PPDM Server Disaster Recovery
- name: Get sync-instance
  hosts: localhost
  gather_facts: yes
  connection: local
  vars_files: 
    - ./vars/main.yml
  vars:
      isoformat: '%Y-%m-%dT%H:%M:%S.%fZ'
      new_password: Password123!!! 
      auto_approve: false 
      repositoryHost: "{{ lookup('env','DDVE_PRIVATE_FQDN') }}"
  tasks:
  - name: Setting Base URL
    set_fact: 
      ppdm_baseurl: "https://{{ ppdm_fqdn | regex_replace('^https://') }}"     
  - name: Get PPDM Token for https://{{ ppdm_fqdn | regex_replace('^https://') }}
    include_role: 
      name: get_ppdm_token
    vars: 
      ppdm_password: admin
  - debug: 
      msg: "{{ access_token }}"
      verbosity: 1
    name: do we have a token ?  

  - name: Get PPDM Configuration 
    include_role: 
      name: get_ppdm_configuration 
  - debug:
      msg: "{{ configuration }}"
      verbosity: 0
    when: configuration is defined

  - name: Get  Nodes from PPDM
    include_role:
      name: get_ppdm_nodes
    vars: 
      id: "{{ configuration.content[0].nodeId }}"  
  - debug:
      msg: "{{ nodes }}"     
      verbosity: 0     
    when: nodes is defined       

  - name: get disaster recovery confgurations
    include_role:
      name: get_ppdm_server_disaster_recovery_confgurations
    when: nodes.status == "PENDING"  
  - debug:
      msg: "{{ server_disaster_recovery_configuration }}"     
      verbosity: 0     
    when: server_disaster_recovery_configuration is defined                 

  - name: get disaster recovery confgurations
    include_role:
      name: query_ppdm_server_disaster_recovery_confgurations
    vars:
      body: 
        credentialPassword: "{{ new_password }}"
        credentialUsername: "{{ ppdm_fqdn | regex_replace('^https://')}}" 
        id: "{{ server_disaster_recovery_configuration.id }}"
        repositoryFilesystem: "BOOST_FILE_SYSTEM"
        repositoryHost: "{{ repositoryHost }}"
        repositoryPath: ""
    when: server_disaster_recovery_configuration is defined               
  - debug:
      msg: "{{ query_server_disaster_recovery_configuration }}"     
      verbosity: 0     
    when: query_server_disaster_recovery_configuration is defined  

  - name: Get SDR Hosts
    include_role:
      name: get_ppdm_server_disaster_recovery_hosts
    vars:
      filter: 'version eq "{{ nodes.version }}"'  
    when: nodes.status == "PENDING"  
  - debug:
      msg: "{{ server_disaster_recovery_hosts }}"     
      verbosity: 0     
    when: server_disaster_recovery_hosts is defined     

  - name: Get SDR Hosts
    include_role:
      name: get_ppdm_server_disaster_recovery_backups
    vars:
      filter: 'nodeId eq "{{ server_disaster_recovery_hosts[0].nodeId }}"'  
    when: server_disaster_recovery_hosts is defined     
  - debug:
      msg: "{{ server_disaster_recovery_backups }}"     
      verbosity: 0     
    when: server_disaster_recovery_backups is defined     

  - set_fact:
      SysDR: "{{ server_disaster_recovery_backups  | json_query(jmesquery) }}"
    vars:
      jmesquery: "[? backupConsistencyType=='FULL'] | [0]"
 
  - debug:
      msg: "{{ SysDR }}"     
      verbosity: 0     
    when: SysDR is defined 

  - name: Run Server Disaster Recovery
    include_role:
      name: run_ppdm_server_disaster_recovery_backups
    vars:
     server_disaster_recovery_backup: "{{ SysDR }}" 
    when: SysDR is defined and auto_approve == true     
  - debug:
      msg: "{{ server_disaster_recovery_backups_state }}"     
      verbosity: 0     
    when: server_disaster_recovery_backups_state is defined 
