- name: Deploy PPDM
  hosts: localhost
  gather_facts: no
  connection: local
  vars_files: 
    - ./vars/main.yml
  vars: 
    ovf: dellemc-ppdm-sw-19.16.0-15.ova
    datacenter: democenter
    datastore: nfs-datastore
    disk_provisioning: thin
    networks: '{"VM Network": "prod vm network"}'
    ip0: '192.168.1.53'
    gateway: '192.168.1.1'
    netmask0: '255.255.255.0'
    ip0_ipv6: ''
    gateway_ipv6: ''
    netmask0_ipv6: ''
    DNS: '192.168.1.2'
    fqdn: 'ppdm-2.demo.local'
    vm_name: 'ppdm-2'
    s3_bucket: dps-products
    s3_host: http://ansible.demo.local:9000
    access_key: minioadmin
    secret_key: Password123!
    s3_container: powerprotect
    release: 19.16
    local_directory: /tmp    
  tasks:
  - name: Check  '{{ vm_name }}' already exists
    community.vmware.vmware_vm_info:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      vm_name: '{{ vm_name }}'
    delegate_to: localhost
    register: vm_info

  - name: load_image_from_s3
    amazon.aws.aws_s3:
      bucket: "{{ s3_bucket}}"
      object: "{{ s3_container }}/{{ release }}/{{ ovf }}"
      dest: "{{ local_directory }}/{{ ovf }}"
      mode: get
      encrypt: false
      endpoint_url: "{{ s3_host }}"
      access_key: "{{ access_key }}"      
      secret_key: "{{ secret_key }}"  
    when: vm_info does not exist  
  - name: Deploy ovf
    vmware_deploy_ovf:
      allow_duplicates: no
      datacenter: '{{ datacenter }}'
      datastore: '{{ datastore }}'
      ovf: '{{ local_directory }}/{{ ovf }}'
      wait_for_ip_address: true
      networks: '{{ networks }}'
      name: '{{ vm_name }}'
      properties:
        vami.ip0.brs: '{{ ip0 }}'
        vami.gateway.brs: '{{ gateway }}'
        vami.netmask0.brs: '{{ netmask0 }}'
        vami.ip0.ipv6.brs: '{{ ip0_ipv6 }}'
        vami.gateway.ipv6.brs: '{{ gateway_ipv6 }}'
        vami.netmask0.ipv6.brs: '{{ netmask0_ipv6 }}'
        vami.DNS.brs: '{{ DNS }}'
        vami.fqdn.brs: '{{ fqdn }}' 
    delegate_to: localhost
    register: result
    when: vm_info does not exist      
  - name: display_result
    debug: 
      msg: "{{ result }}"
    when: vm_info does not exist           